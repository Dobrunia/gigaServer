const fs = require('fs');
const path = require('path');
const AI_User = require('../AI/AI_User');
const { AI_CONFIG_FIRST, AI_CONFIG_SECOND } = require('../AI/config');
const { MESSAGES } = require('../texts');
class UserStorage {
  constructor() {
    // –í –ø–∞–º—è—Ç–∏ –¥–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ online –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.users = new Map(); // chatId -> userData (status === 'online')
    this.jsonFile = path.join(__dirname, '../data/users.json');
    this.ensureDataDir();
    this.loadFromJson();

    //AI
    this.messages = [];
    this.aiInstances = new Map(); // chatId -> AI_User instance
    this.lastAITriggers = new Map(); // chatId -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ AI
    this.initializeAI(AI_CONFIG_FIRST);
    this.initializeAI(AI_CONFIG_SECOND);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data/ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  ensureDataDir() {
    const dataDir = path.dirname(this.jsonFile);
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞
   * –í –ø–∞–º—è—Ç—å –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'online'
   */
  loadFromJson() {
    try {
      if (fs.existsSync(this.jsonFile)) {
        const data = fs.readFileSync(this.jsonFile, 'utf8');
        const usersArray = JSON.parse(data);

        // –í –ø–∞–º—è—Ç—å –ø–æ–¥–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ online
        this.users.clear();
        usersArray.forEach((user) => {
          if (user.status === 'online') {
            this.users.set(user.chatId, user);
          }
        });

        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ JSON: –≤—Å–µ–≥–æ=${usersArray.length}, –æ–Ω–ª–∞–π–Ω=${this.users.size}`);
      } else {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        fs.writeFileSync(this.jsonFile, JSON.stringify([], null, 2));
        console.log('–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π users.json');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON:', error);
    }
  }

  /**
   * –ß–∏—Ç–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (online –∏ offline)
   */
  readRegistry() {
    try {
      const data = fs.readFileSync(this.jsonFile, 'utf8');
      return JSON.parse(data);
    } catch (_) {
      return [];
    }
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª
   * @param {Array} array - –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  writeRegistry(array) {
    try {
      fs.writeFileSync(this.jsonFile, JSON.stringify(array, null, 2));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON:', error);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ 'online'
   * @param {string} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  addUser(chatId, userData) {
    const registry = this.readRegistry();
    const nowISO = new Date().toISOString();
    const idx = registry.findIndex((u) => u.chatId === chatId);
    const record = {
      chatId,
      userId: userData.id,
      firstName: userData.first_name,
      lastName: userData.last_name,
      username: userData.username,
      joinedAt: idx >= 0 ? registry[idx].joinedAt : nowISO,
      status: 'online',
    };

    if (idx >= 0) registry[idx] = record;
    else registry.push(record);
    this.writeRegistry(registry);

    // –í –ø–∞–º—è—Ç—å –∫–ª–∞–¥–µ–º —Ç–æ–ª—å–∫–æ online
    this.users.set(chatId, record);

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω: ${record.firstName} (${chatId})`);
    console.log(`–û–Ω–ª–∞–π–Ω: ${this.getRealUserCount()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${this.getAICount()} AI`);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 'offline')
   * @param {string} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  removeUser(chatId) {
    const registry = this.readRegistry();
    const idx = registry.findIndex((u) => u.chatId === chatId);
    if (idx >= 0) {
      registry[idx] = { ...registry[idx], status: 'offline' };
      this.writeRegistry(registry);
    }

    const user = this.users.get(chatId);
    if (user) {
      this.users.delete(chatId);
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–ª–∞–π–Ω: ${user.firstName} (${chatId})`);
      console.log(`–û–Ω–ª–∞–π–Ω: ${this.getRealUserCount()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${this.getAICount()} AI`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
   * @param {string} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {boolean} true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
   */
  isUserRegistered(chatId) {
    return this.users.has(chatId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatId
   * @param {string} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object|null} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null
   */
  getUser(chatId) {
    return this.users.get(chatId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getAllUsers() {
    // –í –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ online
    return Array.from(this.users.values());
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getUserCount() {
    return this.users.size;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–∫–ª—é—á–∞—è AI)
   * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getRealUserCount() {
    return Array.from(this.users.values()).filter((user) => user.userId !== 'ai_user').length;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getAICount() {
    return Array.from(this.users.values()).filter((user) => user.userId === 'ai_user').length;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ AI
   */
  getStats() {
    return {
      users: this.getRealUserCount(),
      ai: this.getAICount(),
      total: this.getUserCount(),
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
   * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  initializeAI(config) {
    try {
      const aiUser = new AI_User(config);
      this.addUser(aiUser.user.chatId, aiUser.user);
      this.aiInstances.set(aiUser.user.chatId, aiUser);
      console.log('‚úÖ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: ' + config.chatId);
      console.log(`–û–Ω–ª–∞–π–Ω: ${this.getRealUserCount()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${this.getAICount()} AI`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (–º–∞–∫—Å–∏–º—É–º 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  addMessage(messageText) {
    this.messages.push(messageText);
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    if (this.messages.length > 20) {
      this.messages = this.messages.slice(-20);
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 —Å–µ–∫—É–Ω–¥
   * @param {string} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
   */
  scheduleWelcomeMessage(chatId, bot) {
    setTimeout(() => {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ü—Ä–∏–≤–µ—Ç)" –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç)');
        // console.log(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`, error);
      }
    }, 5000); // 5 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è AI –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
   */
  async triggerAIResponse(bot) {
    const now = Date.now();

    // –°–ª—É—á–∞–π–Ω—ã–π —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ (30%)
    // if (Math.random() > 0.3) return;

    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π AI —ç–∫–∑–µ–º–ø–ª—è—Ä
    for (const [chatId, aiInstance] of this.aiInstances) {
      const config = aiInstance.config;
      const lastTrigger = this.lastAITriggers.get(chatId) || 0;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è —ç—Ç–æ–≥–æ AI
      if (now - lastTrigger < config.cooldown) {
        const remainingTime = Math.ceil((config.cooldown - (now - lastTrigger)) / 1000 / 60);
        console.log(`ü§ñ AI ${chatId} –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ, –æ—Å—Ç–∞–ª–æ—Å—å ${remainingTime} –º–∏–Ω`);
        continue;
      }

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ AI
        this.lastAITriggers.set(chatId, now);

        const response = await aiInstance.generateResponse(this.messages);
        if (response) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫—Ä–æ–º–µ AI
          const allUsers = this.getAllUsers();
          allUsers.forEach((user) => {
            if (user.userId !== 'ai_user') {
              try {
                bot.sendMessage(user.chatId, MESSAGES.anonTextPrefix(response));
              } catch (error) {
                console.error(
                  `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ AI –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chatId}:`,
                  error.message
                );
              }
            }
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
          this.addMessage(response);
          console.log(`ü§ñ AI ${chatId} –æ—Ç–≤–µ—Ç–∏–ª –≤ —á–∞—Ç`);
          return; // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ AI ${chatId}:`, error);
      }
    }
  }
}

module.exports = new UserStorage();
