// To run this code you need to install the following dependencies:
// npm install @google/genai mime
// npm install -D @types/node

const { GoogleGenAI } = require('@google/genai');
class AI_User {
  constructor(config) {
    if (!config) {
      throw new Error('AI_User requires config parameter');
    }
    if (!process.env.GEMINI_API_KEY) {
      console.error('‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
      throw new Error('GEMINI_API_KEY is required');
    }

    this.ai = new GoogleGenAI({
      apiKey: process.env.GEMINI_API_KEY,
    });
    this.config = config; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ñ–∏–≥
    this.model = config.model;
    this.user = {
      chatId: config.chatId,
      id: config.id,
      first_name: config.first_name,
      last_name: config.last_name,
      username: config.username,
    };
    this.prompt = config.prompt;
    this.isProcessing = false; // –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {Array} messages - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
   * @returns {Promise<string>} –û—Ç–≤–µ—Ç AI
   */
  async generateResponse(messages) {
    if (this.isProcessing) {
      console.log('ü§ñ AI —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return null;
    }

    this.isProcessing = true;
    console.log('ü§ñ AI –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É...');

    try {
      const fullPrompt = `${this.prompt}\n${messages.join('\n')}`;

      const result = await this.ai.models.generateContent({
        model: this.model,
        contents: [{ role: 'user', parts: [{ text: fullPrompt }] }],
      });

      // 1) –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ–æ—Ä–º—É SDK (–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
      try {
        if (result && result.response && typeof result.response.text === 'function') {
          const t = result.response.text();
          if (t) return String(t).trim();
        }
      } catch (e) {
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
      }

      // 2) –Ø–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –ø–æ–∫–∞–∑–∞–ª:
      // result.candidates[0].content.parts[*].text
      if (Array.isArray(result?.candidates) && result.candidates.length > 0) {
        const cand = result.candidates[0];
        // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç: cand.content.parts -> [{text: "..."}]
        const parts =
          cand?.content?.parts ??
          cand?.message?.parts ?? // –≤–æ–∑–º–æ–∂–Ω—ã–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
          null;

        if (Array.isArray(parts) && parts.length > 0) {
          const text = parts
            .map((p) => p && (p.text ?? p.content ?? ''))
            .filter(Boolean)
            .join('');
          if (text) return String(text).trim();
        }

        // fallback: cand.content –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å .text
        if (typeof cand?.content?.text === 'string') {
          return cand.content.text.trim();
        }
        if (typeof cand?.text === 'string') {
          return cand.text.trim();
        }
      }

      // 3) –ï—â—ë –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—É—Ç—å: result.output / result.outputs
      if (Array.isArray(result?.output) && result.output.length > 0) {
        const out = result.output[0];
        if (Array.isArray(out?.content)) {
          const text = out.content
            .map((c) => c.text ?? '')
            .filter(Boolean)
            .join('');
          if (text) return text.trim();
        }
        if (typeof out?.text === 'string') return out.text.trim();
      }

      // 4) –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –¥–µ–±–∞–≥–∞ ‚Äî —Å–¥–µ–ª–∞–π —ç—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–µ
      console.error(
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ Google GenAI SDK. –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n',
        console.log(result, { depth: 4 })
      );

      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI:', error);
      return null;
    } finally {
      this.isProcessing = false;
    }
  }
}

module.exports = AI_User;
