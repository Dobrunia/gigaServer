use anyhow::{Context, Result};
use image::DynamicImage;
use indicatif::{ProgressBar, ProgressStyle};
use std::path::Path;
use walkdir::WalkDir;
use webp::Encoder;

// üî• –ó–ê–•–ê–†–î–ö–û–ñ–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ üî•
const INPUT_DIR: &str = r"D:\photo_to_sort";           // –ü–∞–ø–∫–∞ —Å NEF/JPG —Ñ–∞–π–ª–∞–º–∏
const OUTPUT_DIR: &str = r"D:\ergrwg";                 // –ü–∞–ø–∫–∞ –¥–ª—è WebP —Ñ–∞–π–ª–æ–≤  
const WEBP_QUALITY: u8 = 85;                           // –ö–∞—á–µ—Å—Ç–≤–æ WebP (0-100)
const RECURSIVE: bool = false;                         // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏?

fn main() -> Result<()> {
    println!("üöÄ NEF/JPG to WebP Converter");
    println!("üìÅ Input: {}", INPUT_DIR);
    println!("üìÅ Output: {}", OUTPUT_DIR);
    println!("üé® Quality: {}%", WEBP_QUALITY);
    println!("üîÑ Recursive: {}", RECURSIVE);
    
    let separator = "‚îÄ".repeat(50);
    println!("{}\n", separator);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
    let input_path = Path::new(INPUT_DIR);
    if !input_path.exists() {
        return Err(anyhow::anyhow!("Input directory '{}' does not exist!", INPUT_DIR));
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
    std::fs::create_dir_all(OUTPUT_DIR)?;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ NEF –∏ JPG —Ñ–∞–π–ª—ã
    let image_paths = find_image_files(INPUT_DIR, RECURSIVE)?;
    
    if image_paths.is_empty() {
        println!("‚ùå No NEF or JPG files found in '{}'", INPUT_DIR);
        return Ok(());
    }
    
    println!("üì∏ Found {} images to process", image_paths.len());
    println!("{}\n", separator);
    
    // üî• –ü–†–û–ì–†–ï–°–°-–ë–ê–† üî•
    let pb = ProgressBar::new(image_paths.len() as u64);
    let style = ProgressStyle::default_bar()
        .template("{msg} {spinner:.green} [{bar:60.cyan/blue}] {pos}/{len} ({eta}) {percent}%")?
        .progress_chars("‚ñà‚ñì‚ñë")
        .tick_strings(&["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]);
    pb.set_style(style);
    pb.set_message(format!("üîÑ Converting images ({}% quality)", WEBP_QUALITY));
    
    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    let mut results = Vec::new();
    for (index, path) in image_paths.iter().enumerate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        pb.set_position(index as u64);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        if let Some(filename) = path.file_name().and_then(|s| s.to_str()) {
            pb.set_message(format!("üîÑ Processing: {}", filename));
        }
        
        let result = process_single_image(path, OUTPUT_DIR, WEBP_QUALITY);
        pb.inc(1);
        results.push(result);
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    pb.finish_with_message("‚úÖ Conversion complete!");
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let (success, failed): (Vec<_>, Vec<_>) = results
        .into_iter()
        .partition(Result::is_ok);
    
    let success_count = success.len();
    let failed_count = failed.len();
    
    println!("\nüéâ === FINAL RESULTS ===");
    println!("‚úÖ Successfully converted: {}", success_count);
    println!("‚ùå Failed: {}", failed_count);
    if !image_paths.is_empty() {
        println!("üìä Success rate: {:.1}%", (success_count as f32 / image_paths.len() as f32) * 100.0);
    }
    
    if !failed.is_empty() {
        println!("\nüìã Failed files:");
        for err in failed {
            if let Err(e) = err {
                println!("  ‚ùå {}", e);
            }
        }
    } else {
        println!("‚ú® All files processed successfully!");
    }
    
    println!("\nüìÅ WebP files saved to: {}", OUTPUT_DIR);
    Ok(())
}

fn find_image_files(input_dir: &str, recursive: bool) -> Result<Vec<std::path::PathBuf>> {
    let walker = WalkDir::new(input_dir)
        .follow_links(false)
        .max_depth(if recursive { std::usize::MAX } else { 1 })
        .into_iter()
        .filter_map(|e| e.ok())
        .filter(|e| {
            let ext = e.path().extension().and_then(|s| s.to_str());
            matches!(
                ext, 
                Some("NEF") | Some("nef") | 
                Some("JPG") | Some("jpg") | 
                Some("JPEG") | Some("jpeg")
            )
        });
    
    let paths: Vec<std::path::PathBuf> = walker.map(|e| e.into_path()).collect();
    Ok(paths)
}

fn process_single_image(
    input_path: &std::path::Path, 
    output_dir: &str, 
    quality: u8
) -> Result<()> {
    let filename = input_path
        .file_stem()
        .and_then(|s| s.to_str())
        .context("Invalid filename")?;
    
    let output_path = std::path::Path::new(output_dir)
        .join(format!("{}.webp", filename));
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    if output_path.exists() {
        return Ok(());
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    let img = load_image(input_path).context(format!(
        "Failed to load: {}",
        input_path.display()
    ))?;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP
    convert_to_webp(&img, &output_path, quality).context(format!(
        "Failed to convert {} to WebP",
        input_path.display()
    ))?;
    
    Ok(())
}

fn load_image(path: &std::path::Path) -> Result<DynamicImage> {
    let img = image::open(path)
        .with_context(|| format!("Cannot open image: {}", path.display()))?;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è)
    Ok(img.to_rgb8().into())
}

fn convert_to_webp(
    img: &DynamicImage, 
    output_path: &std::path::Path, 
    quality: u8
) -> Result<()> {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Encoder::from_image –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Result<Encoder, &str>
    let encoder = match Encoder::from_image(img) {
        Ok(encoder) => encoder,
        Err(e) => return Err(anyhow::anyhow!("Failed to create WebP encoder: {}", e)),
    };
    
    let webp = encoder.encode(quality as f32);
    
    std::fs::write(output_path, &*webp)
        .with_context(|| format!("Failed to write: {}", output_path.display()))?;
    
    Ok(())
}